def build_mode(String mode, String ver) {
  stage("${ver} build $mode") {
    sh "make -j8 BUILD_MODE=$mode"
  }
}

def build_and_test_mode(String mode, String ver) {
  build_mode(mode, ver)
  try {
    stage("${ver} test $mode") {
      sh "make -j8 BUILD_MODE=$mode test_tree"
    }
  } catch (e) {
    currentBuild.result = 'UNSTABLE'
    result = "FAIL" // make sure other exceptions are recorded as failure too
  }
}

def os_versions = [
  "20.04",
  "22.04",
]

def parallel_versions = [:]

for (v in os_versions) {
  def os_version = v;

  parallel_versions[os_version] = {
    node("${os_version}") {
      stage("${os_version} preparation") {
        checkout scm
      }

      build_and_test_mode("debug", os_version);
      build_and_test_mode("release", os_version);
      build_and_test_mode("profile", os_version);
      build_mode("rpi_debug", os_version);
      build_mode("rpi_release", os_version);
      // Collect result
      //  step([$class: 'TapPublisher',
      //       testResults: '**/*.bats.test.out',
      //       verbose: true])
    } // node

  } // parallel

} // os_versions

parallel parallel_versions
